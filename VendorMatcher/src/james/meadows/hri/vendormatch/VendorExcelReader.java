package james.meadows.hri.vendormatch;

import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.apache.poi.ss.usermodel.*;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;

public class VendorExcelReader {
    public static final String SAMPLE_XLSX_FILE_PATH = "./VendorInfo/";

    public static void readExcel() throws IOException, InvalidFormatException {

    	File folder = new File(SAMPLE_XLSX_FILE_PATH);
    	File file = null;
    	if (folder.listFiles().length == 0) {
    		System.out.println("VendorInfo Folder is empty. Please put the Vendor Excel file into this folder.");
    		return;
    	}
    	else file = folder.listFiles()[0];
    	
        Workbook workbook = WorkbookFactory.create(file);
        Sheet sheet = workbook.getSheetAt(0);
        Iterator<Row> rowIterator = sheet.rowIterator();
     
        int r = 0;
        while (rowIterator.hasNext()) {
        	r++;
            Row row = rowIterator.next();
            Vendor vendor = new Vendor();
            
            if (row.getCell(0) != null) vendor.hriCode = row.getCell(0).getStringCellValue();
            if (row.getCell(2) != null) {
            	row.getCell(2).setCellType(CellType.STRING);
            	if (Settings.debug) {
            		if (!row.getCell(2).getStringCellValue().toLowerCase().contains(Settings.onlyLoad[0].toLowerCase()))continue;
            	}
            	vendor.vendorID = row.getCell(2).getStringCellValue();
            }
            if (row.getCell(3) != null) {
            	row.getCell(3).setCellType(CellType.STRING);
            	if (Settings.debug) {
            		if (!row.getCell(3).getStringCellValue().toLowerCase().contains(Settings.onlyLoad[1].toLowerCase()))continue;
            	}
            	vendor.vendorName = row.getCell(3).getStringCellValue();
            }
            if (row.getCell(4) != null) {
            	row.getCell(4).setCellType(CellType.STRING);
            	if (Settings.debug) {
            		if (!row.getCell(4).getStringCellValue().toLowerCase().contains(Settings.onlyLoad[2].toLowerCase()))continue;
            	}
            	vendor.vendorAddress1 = row.getCell(4).getStringCellValue();
            }else if (Settings.debug) {
            	continue;
            }
            if (row.getCell(5) != null) vendor.vendorAddress2 = row.getCell(5).getStringCellValue();
            if (row.getCell(6) != null) vendor.vendorAddress3 = row.getCell(6).getStringCellValue();
            if (row.getCell(7) != null) vendor.vendorCity = row.getCell(7).getStringCellValue();
            if (row.getCell(8) != null) {
            	row.getCell(8).setCellType(CellType.STRING);
            	vendor.vendorState = row.getCell(8).getStringCellValue();
            }
            if (row.getCell(9) != null) {
            	row.getCell(9).setCellType(CellType.STRING);
            	if (row.getCell(9).getCellType().equals(CellType.STRING))vendor.vendorZip = row.getCell(9).getStringCellValue();
            	if (row.getCell(9).getCellType().equals(CellType.NUMERIC))vendor.vendorZip = "" + row.getCell(9).getNumericCellValue();
            }
            if (row.getCell(10) != null) {
            	row.getCell(10).setCellType(CellType.STRING);
            	if (row.getCell(10).getCellType().equals(CellType.STRING))vendor.vendorPhone = row.getCell(10).getStringCellValue();
            	if (row.getCell(10).getCellType().equals(CellType.NUMERIC))vendor.vendorPhone = "" + row.getCell(10).getNumericCellValue();
            }
            vendor.row = r;
            VendorMatcher.vendors.add(vendor);
        }
        System.out.println("Successfully loaded " + file.getName() + ".");    
        VendorMatcher.matchBySimilarity(true, new ArrayList<Vendor>());
        VendorMatcher.outputUniqueList();
		VendorMatcher.export.getExcel().export("Autogenerated");
		System.out.println("Exporting as Autogenerated.xlsx in main program directory");
        workbook.close();
    }
}
